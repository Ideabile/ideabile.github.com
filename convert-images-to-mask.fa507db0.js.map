{"version":3,"sources":["../tangled/convert-images-to-mask.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,8DAAP,EAAuE,IAAvE,CAA4E,UAAA,MAAA,EAAM;AAC9E,WAAe,UAAf,CAA0B,GAA1B,EAAqC;;;;;;;AACnB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,CAAC,GAAD,EAAM;AAC3B,cAAA,OAAO,EAAE;AACL,kCAAkB;AADb;AADkB,aAAN,CAAX,CAAA;;;AAAR,YAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;iBAKK,UAAU,CAAA;AAAC,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,CAAC,WAAN,EAAN,CAAA;;;AAAtB,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAA,EAAA,CAAA,KAAA,CAAI,UAAJ,EAAc,CAAA,KAAA,CAAA,EAAC,EAAA,CAAA,IAAA,EAAD,CAAd,CAAA,GAAP,CAAA;;;;AACH;;AAED,WAAe,iBAAf,CAAiC,GAAjC,EAA4C;;;;;;;AAClC,YAAA,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAR;AAEkB,YAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,EAAO,IAAP;AACpB,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,QAA3B,CAAN,CAAA;;;AADc,mBAAA,CAAA;AAAA;AAAA,cAAM,EAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,CACpB,EAAA,CAAA,IAAA,EADoB,CAAA,EAErB,CACC;AACA,qBAFD,EAEY,QAFZ,EAEsB,cAFtB,EAEsC,OAFtC,EAE+C,SAF/C,EAE0D,KAF1D,EAGC;AACA,oBAJD,EAIW,KAJX,EAIkB,UAJlB,EAI8B,MAJ9B,EAIsC,OAJtC,EAI+C,KAJ/C,EAKC;AACA,mBAND,EAMU,MANV,EAMkB,YANlB,EAMgC,MANhC,EAMwC,OANxC,EAOC;AACA,oBARD,EAQW,KARX,EAQkB,cARlB,EAQkC,OARlC,EASC;AACA,oBAVD,EAUW,KAVX,EAYC;AACA,uBAbD,EAac,OAbd,EAcC,UAdD,EAca,MAdb,EAcqB,cAdrB,EAcqC,OAdrC,EAgBC,WAhBD,EAgBc,QAhBd,EAgBwB,KAhBxB,EAiBC;AACA,qBAlBD,CAFqB,CAAA,CAAN,CAAA;;;AAAZ,YAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;AAuBiB,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,IAAP,CAAY,CACrC;AAAE,cAAA,IAAI,EAAE,QAAR;AAAkB,cAAA,OAAO,EAAE,SAAS,CAAC,CAAD,CAAT,CAAa,QAAb;AAA3B,aADqC,CAAZ,EAE1B,CACC,SADD,EACY,QADZ,EAEC;AACA,uBAHD,EAGc,OAHd,EAIC,UAJD,EAIa,KAJb,EAKC,YALD,EAKe,KALf,EAMC,UAND,EAMa,MANb,EAMqB,cANrB,EAMqC,OANrC,EAOC,SAPD,CAF0B,CAAN,CAAA;;;AAAjB,YAAA,cAAc,GAAG,EAAA,CAAA,IAAA,EAAjB;AAYA,YAAA,UAAU,GAAG,SAAS,CAAC,CAAD,CAAtB;AACN,YAAA,KAAK,CAAC,GAAN,GAAY,GAAG,CAAC,eAAJ,CAAoB,UAAU,CAAC,MAAD,CAA9B,CAAZ;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;;;;AACH;;AAGD,WAAe,IAAf,GAAmB;;;;;;AACT,YAAA,GAAG,GAAG,QAAQ,CAAC,aAAT,CAAuB,wBAAvB,EAAiD,GAAvD;AACQ,mBAAA,CAAA;AAAA;AAAA,cAAM,iBAAiB,CAAC,GAAD,CAAvB,CAAA;;;AAAR,YAAA,KAAK,GAAG,EAAA,CAAA,IAAA,EAAR;AACN,YAAA,QAAQ,CAAC,cAAT,CAAwB,MAAxB,EAAgC,WAAhC,CAA4C,KAA5C;;;;;;;AAEH;;AAED,EAAA,IAAI;AACP,CA/DD","file":"convert-images-to-mask.fa507db0.js","sourceRoot":"../exported","sourcesContent":["import('https://unpkg.com/wasm-imagemagick/dist/bundles/magickApi.js').then(Magick => {\n    async function fetchImage(url: string) {\n        const image = await fetch(url, {\n            headers: {\n                'Sec-Fetch-Dest': 'image'\n            }\n        });\n        return new Uint8Array(await image.arrayBuffer())\n    }\n\n    async function getProcessedImage(url: string) {\n        const image = document.createElement('img');\n\n        const processed = await Magick.Call([\n            await Magick.buildInputFile(url, 'in.png')\n        ], [\n            //Let's initialise the image\n            'convert', 'in.png', '-bordercolor', 'white', '-border', '1x1',\n            // Set Alpha to most of the image\n            '-alpha', 'set', '-channel', 'RGBA', '-fuzz', '20%',\n            // Fill the image with white\n            '-fill', 'none', '-floodfill', '+0+0', 'white',\n            // Clean and set transparent\n            '-shave', '1x1', '-transparent', 'white',\n            // Increase the saturation\n            '-level', '30%',\n\n            // Convert to grey\n            '-modulate', '100,0',\n            '-channel', 'RGBA', '-transparent', 'white',\n\n            '-evaluate', 'Divide', '1.5',\n            // Export\n            'out.png',\n        ]);\n\n        const processed_grey = await Magick.Call([\n            { name: 'in.png', content: processed[0]['buffer'] }\n        ], [\n            'convert', 'in.png',\n            // Convert to grey\n            '-modulate', '100,0',\n            '-channel', 'RGB',\n            '-threshold', '80%',\n            '-channel', 'RGBA', '-transparent', 'white',\n            'out.png'\n        ]);\n\n        const firstImage = processed[0];\n        image.src = URL.createObjectURL(firstImage['blob']);\n\n        return image;\n    }\n\n\n    async function init() {\n        const img = document.querySelector('img[alt=\"machine.png\"]').src\n        const image = await getProcessedImage(img);\n        document.getElementById('demo').appendChild(image);\n\n    }\n\n    init();\n});\n"]}